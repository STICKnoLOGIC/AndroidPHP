# This is a basic workflow to help you get started with Actions

name: git build for Android aarch64/arm64-v8a

# Controls when the workflow will run
on:
 workflow_dispatch:
  inputs:
      createRelease:
        description: 'If "yes", create the release.'
        required: true
        default: 'no'
      version:
        description: 'version'
        required: true
        default : '0.0.1b'
        
jobs:
   building-git:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      
      - name: Checkout Lara Packages Binaries
        uses: actions/checkout@master
        with:
          repository: STICKnoLOGIC/Lara-Packages-Binaries
          token: ${{ secrets.PAT }}
          path: ./LaraPackageBinary
      
      - name: setup Environment for Cross-compiling for Android ARMv8 (aarch64)
        run: |
          source ./installer
          setup_environment
          echo "$(pwd)/aarch64-linux-musl/bin" >> $GITHUB_PATH
          
      - name: install
        run: |
          source ./installer && cd $BUILD_DIR && build_git
      
      - name: minifying and fixing git
        working-directory: git-static
        run: |
            echo [INFO] git-core
            cd git/bin
            ln -sfv git ../libexec/git-core/git
            for file in add am annotate apply archive bisect--helper blame branch bugreport bundle cat-file check-attr check-ignore check-mailmap check-ref-format checkout checkout--worker checkout-index cherry cherry-pick clean clone column commit commit-graph commit-tree config count-objects credential credential-cache credential-cache--daemon credential-store describe diff diff-files diff-index diff-tree diftool env--helper fast-export fast-import fetch fetch-pack fmt-merge-msg for-each-ref for-each-repo format-patch fsck fsck-obkects gc get-tar-commit-id grep hash-object help index-pack init init-db interpret-trailers log ls-files ls-remote ls-tree mailinfo mailsplit maintenance merge merge-base merge-file merge-index merge-ours merge-recursive merge-subtree merge-tree mktag mktree multi-pack-index mv name-rev notes pack-objects pack-redundant pack-refs patch-id prune prune-packed pull push range-diff read-tree rebase receive-pack reflog remote remote-ext remote-fd repack replace rerere reset restore rev-list rev-parse revert rm send-pack shortlog show show-branch show-index show-ref sparse-checkout stage stash status stripspace submodule--helper switch symbolic-ref tag unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-commit verify-pack verify-tag whatchanged worktree write-tree; do 
            if [ -e "../libexec/git-core/git-"$file ]; then
            rm -f "../libexec/git-core/git-"$file
            ln -sfv git "../libexec/git-core/git-"$file
            fi
            done
            
            cd ../libexec/git-core/
            echo linking https
            for file in remote-ftp remote-ftps remote-https ; do
            if [ -e "./git-"$file ]; then
            rm -f "./git-"$file
            ln -sfv git-remote-http "./git-"$file
            fi
            done
            
            #sh
            echo linking to sh
            for file in merge-resolve bisect merge-octopus difftool--helper quiltimport merge-one-file request-pull web--browse submodule mergetool filter-branch instaweb subtree citool ; do
            if [ -e "./git-"$file ]; then
                sudo sed -i 's/#!\/bin\/sh/#!\/system\/bin\/sh/g' "./git-"$file
              fi
            done
               
            # perl
            echo linking to perl
            for file in cvsexportcommit cvsimport archimport add--interactive send-email cvsserver  ; do
            if [ -e "./git-"$file ]; then
                sed -i 's/#!\/bin\/sh/#!\/system\/bin\/perl/g' "./git-"$file
              fi
            done
            
            # python
            echo linking to python
            for file in p4; do
              if [ -e "./git-"$file ]; then
                sed -i 's/#!\/bin\/sh/#!\/system\/bin\/python/g' "./git-"$file
              fi
            done

            cd ../..
            for file in bin/git-cvsserver bin/git-shell libexec/git-core/git-shell libexec/git-core/git-cvsserver share/man/man1/git-cvsserver.1 share/man/man1/git-shell.1 ; do
              if [ -e "$file" ]; then
                rm -fvR $file
              fi
            done
            cd ..
            
            tar -cv git | gzip -9 - > git.tar.gz
            
            echo deleting unneeded file
            rm -rvf git


      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: "package"
          path: "git-static"
      


            
