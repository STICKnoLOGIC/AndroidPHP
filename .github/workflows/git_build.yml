# This is a basic workflow to help you get started with Actions

name: git test build for Android

# Controls when the workflow will run
on:
 workflow_dispatch:
  inputs:
      tagname:
        description: 'tagname'
        required: true
        default: '8.0.x'
      prefix:
        description: 'your package name'
        required: true
        default: 'ph.STICKnoLOGIC.com.laramobi'
      createRelease:
        description: 'If "yes", create the release.'
        required: true
        default: 'yes'
      version:
        description: 'version'
        required: true
        default : 'v1Beta'

jobs:
   build-on-aarch64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: init directories
        run: mkdir -p aarch64-linux-musl
      - name: fetch aarch64-linux-musl from github release
        working-directory: aarch64-linux-musl
        run: wget -q -O "aarch64-linux-musl.tar.xz" "https://github.com/STICKnoLOGIC/musl-cross-make/releases/latest/download/aarch64-linux-musl.tar.xz"
        
      - name: unzip aarch64-linux-musl and append path
        working-directory: aarch64-linux-musl
        run: |
          tar Jxfv aarch64-linux-musl.tar.xz > /dev/null
          echo "$(pwd)/bin" >> $GITHUB_PATH
      - name: install
        run: |
          mkdir -p git-static
          sudo apt update &> /dev/null
          sudo apt install -y build-essential dh-autoreconf libcurl4-gnutls-dev libexpat1-dev gettext zlib1g zlib1g-dev libghc-zlib-dev libssl-dev libncurses5-dev git \
          gettext-doc libasprintf-dev libgettextpo-dev ghc-prof ghc-doc haskell-doc llvm-11 libcurl4-doc libgnutls28-dev libidn11-dev libkrb5-dev libldap2-dev \
          librtmp-dev libssh2-1-dev libghc-zlib-doc libghc-zlib-prof

          DIR="$(pwd)"
          BASE_BUILD_DIR="$DIR/install_data"
          #libtool and autoconf have a "feature" where it looks for install.sh/install-sh in ./ ../ and ../../
          #this extra subdir makes sure that it doesn't find anything it's not supposed to be looking for.
          BUILD_DIR="$BASE_BUILD_DIR/subdir"
          LIB_BUILD_DIR="$BUILD_DIR/lib"
          INSTALL_DIR="$DIR/bin/php7"

          TOOLCHAIN_PREFIX="aarch64-linux-musl"
          export CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
          CFLAGS="$CFLAGS -static -m64"
          export CXXFLAGS="-static $CXXFLAGS"
          LDFLAGS="-static -static-libgcc -Wl,-static"
          export ac_cv_func_fnmatch_works=yes #musl should be OK
          export ac_cv_func_memcmp_working=yes
          export ac_cv_fread_reads_directories=yes
          export ac_cv_header_libintl_h=no
          export ac_cv_iconv_omits_bom=no
          export ac_cv_snprintf_returns_bogus=no
          echo "[INFO] Cross-compiling for Android ARMv8 (aarch64)"
          export EXTRA_CFLAGS=-lresolv
          echo "[INFO] Compiling for current machine using 64-bit"


          if [ "$TOOLCHAIN_PREFIX" != "" ]; then
              export CC="$TOOLCHAIN_PREFIX-gcc"
              export CXX="$TOOLCHAIN_PREFIX-g++"
              export AR="$TOOLCHAIN_PREFIX-ar"
              export RANLIB="$TOOLCHAIN_PREFIX-ranlib"
              export CPP="$TOOLCHAIN_PREFIX-cpp"
              export LD="$TOOLCHAIN_PREFIX-ld"
          fi

          export CC="$CC"
          export CXX="$CXX"
          export LDFLAGS="$LDFLAGS -L$INSTALL_DIR/lib"
          export CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include"
          export LIBRARY_PATH="$INSTALL_DIR:$INSTALL_DIR/lib:$LIBRARY_PATH"
          export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"

          export PKG_CONFIG_ALLOW_SYSTEM_LIBS="yes"
          export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS="yes"

          rm -r -f "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
          rm -r -f bin/ >> "$DIR/install.log" 2>&1
          mkdir -m 0755 "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
          mkdir -m 0755 "$BUILD_DIR" >> "$DIR/install.log" 2>&1
          mkdir -m 0755 -p $INSTALL_DIR # >> "$DIR/install.log" 2>&1
          mkdir -m 0755 -p "$LIB_BUILD_DIR" >> "$DIR/install.log" 2>&1
          cd "$BUILD_DIR"
          set -e
          echo DL zlib
          curl -L "https://github.com/madler/zlib/releases/latest/download/zlib-1.2.13.tar.gz" | tar -zx >> "$DIR/install.log" 2>&1
          echo -n " checking..."
          cd "./zlib-1.2.13"
          ./configure --prefix="$INSTALL_DIR" \
          --static >> "$DIR/install.log" 2>&1
          echo -n " compiling..."
          make -j 1 >> "$DIR/install.log"
          make install
          rm -fv "$INSTALL_DIR/lib/libz.a"
          cd ..

          echo DL git repo
          export cross_compiling=yes
          curl https://mirrors.kernel.org/pub/software/scm/git/git-2.41.0.tar.gz | tar xz
          ls $INSTALL_DIR
          # mv -fv $DIR/patches/git/* ./git-2.41.0/
          cd git-2.41.0
          RANLIB=$RANLIB ./configure --prefix=$DIR/git-static \
          CFLAGS="-static -I$INSTALL_DIR/include:$INSTALL_DIR:$INSTALL_DIR/bin" \
          $CONFIGURE_FLAGS \
          NO_OPENSSL=1 \
          NO_NSEC=1 \
          NO_GETTEXT=1 \
          NO_EXPAT=1 \
          NO_CURL=1 \
          NO_ZLIB=1 \
          NO_SYMLINK_HEAD=1 \
          # __ANDROID__=1 \
          NO_INSTALL_HARDLINKS=1 \
          NO_PERL=1 \
          USE_LIBPCRE2=1 \
          # --with-curl \
          # --with-zlib=$INSTALL_DIR/lib
          make -j 1 install

      - name: LIST
        run: |
            ls git-static
            # for l in '${ ls ./git-static }'; do
             echo #########
             # ls ./git-static/$l
            # done


      - name: Download artifacts
        uses: actions/upload-artifact@v1
        with:
          name: "GITS"
          path: "git-static/bin"
            
      - name: Download artifacts
        uses: actions/upload-artifact@v1
        with:
          name: "GIT"
          path: "git-static/libexec"
            
