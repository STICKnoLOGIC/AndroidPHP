# This is a basic workflow to help you get started with Actions

name: git test build for Android

# Controls when the workflow will run
on:
 workflow_dispatch:
  inputs:
      tagname:
        description: 'tagname'
        required: true
        default: '8.0.x'
      prefix:
        description: 'your package name'
        required: true
        default: 'ph.STICKnoLOGIC.com.laramobi'
      createRelease:
        description: 'If "yes", create the release.'
        required: true
        default: 'yes'
      version:
        description: 'version'
        required: true
        default : 'v1Beta'

jobs:
   build-on-aarch64:
    runs-on: ubuntu-latest

    steps:
      - name: init directories
        run: mkdir -p aarch64-linux-musl
      - name: fetch aarch64-linux-musl from github release
        working-directory: aarch64-linux-musl
        run: wget -q -O "aarch64-linux-musl.tar.xz" "https://github.com/STICKnoLOGIC/musl-cross-make/releases/latest/download/aarch64-linux-musl.tar.xz"
        
      - name: unzip aarch64-linux-musl and append path
        working-directory: aarch64-linux-musl
        run: |
          tar Jxfv aarch64-linux-musl.tar.xz > /dev/null
          echo "$(pwd)/bin" >> $GITHUB_PATH
      - name: install
        run: |
          mkdir -p git-static
          sudo apt update &> /dev/null
          sudo apt install -y git make autoconf build-essential re2c libexpat1-dev asciidoc libz-dev gettext curl libtool libtool-bin zlib1g-dev libcurl4-openssl-dev libxml2-dev libyaml-dev libgmp-dev libzip-dev libssl-dev &> /dev/null

          DIR="$(pwd)"
          BASE_BUILD_DIR="$DIR/install_data"
          #libtool and autoconf have a "feature" where it looks for install.sh/install-sh in ./ ../ and ../../
          #this extra subdir makes sure that it doesn't find anything it's not supposed to be looking for.
          BUILD_DIR="$BASE_BUILD_DIR/subdir"
          LIB_BUILD_DIR="$BUILD_DIR/lib"
          INSTALL_DIR="$DIR/bin/php7"

          TOOLCHAIN_PREFIX="aarch64-linux-musl"
          export CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
          CFLAGS="-static $CFLAGS"
          export CXXFLAGS="-static $CXXFLAGS"
          LDFLAGS="-static -static-libgcc -Wl,-static"
          export ac_cv_func_fnmatch_works=yes #musl should be OK
          echo "[INFO] Cross-compiling for Android ARMv8 (aarch64)"

          echo "[INFO] Compiling for current machine using 64-bit"


          if [ "$TOOLCHAIN_PREFIX" != "" ]; then
              export CC="$TOOLCHAIN_PREFIX-gcc"
              export CXX="$TOOLCHAIN_PREFIX-g++"
              export AR="$TOOLCHAIN_PREFIX-ar"
              export RANLIB="$TOOLCHAIN_PREFIX-ranlib"
              export CPP="$TOOLCHAIN_PREFIX-cpp"
              export LD="$TOOLCHAIN_PREFIX-ld"
          fi

          export CC="$CC"
          export CXX="$CXX"
          export LDFLAGS="$LDFLAGS"
          export CPPFLAGS="$CPPFLAGS"
          export LIBRARY_PATH="$INSTALL_DIR/lib:$LIBRARY_PATH"
          export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"

          export PKG_CONFIG_ALLOW_SYSTEM_LIBS="yes"
          export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS="yes"

          rm -r -f "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
          rm -r -f bin/ >> "$DIR/install.log" 2>&1
          mkdir -m 0755 "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
          mkdir -m 0755 "$BUILD_DIR" >> "$DIR/install.log" 2>&1
          mkdir -m 0755 -p $INSTALL_DIR >> "$DIR/install.log" 2>&1
          mkdir -m 0755 -p "$LIB_BUILD_DIR" >> "$DIR/install.log" 2>&1
          cd "$BUILD_DIR"
          set -e

          echo DL git repo
          
          curl https://mirrors.kernel.org/pub/software/scm/git/git-2.41.0.tar.gz | tar xvz
          cd git-2.41.0
          ./configure --prefix=$DIR/git-static CFLAGS="${CFLAGS}" NO_OPENSSL=1 NO_CURL=1
          make -j 1 install
