#!/bin/bash


#versions of libs
CURL_v='8.2.1'
GIT_v='2.41.0'
OPENSSL_v='1.1.1t'
ZLIB_v='1.2.13'
PCRE_v='10.41'
LIBEXPAT_v='2.5.0'


#DIRS
DIR="$(pwd)"
BASE_BUILD_DIR="$DIR/install_data"
BUILD_DIR="$BASE_BUILD_DIR/subdir"
LIB_BUILD_DIR="$BUILD_DIR/lib"
GIT_DIRS="/data/data/ph.sticknologic.com.laraide/usr/etc"
INSTALL_DIR="$DIR/LS/"

#cross compiler env
TOOLCHAIN_PREFIX="aarch64-linux-musl"
export CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
export CFLAGS="$CFLAGS -static"
export CXXFLAGS="-static $CXXFLAGS "
export LDFLAGS="-static -static-libgcc -Wl,-static -L$INSTALL_DIR/lib -L/usr/lib"
export ac_cv_func_fnmatch_works=yes
export EXTRA_CFLAGS=-lresolv
export CC="$TOOLCHAIN_PREFIX-gcc"
export CXX="$TOOLCHAIN_PREFIX-g++"
export AR="$TOOLCHAIN_PREFIX-ar"
export RANLIB="$TOOLCHAIN_PREFIX-ranlib"
export CPP="$TOOLCHAIN_PREFIX-cpp"
export LD="$TOOLCHAIN_PREFIX-ld"
export CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include"
export LIBRARY_PATH="$INSTALL_DIR:$INSTALL_DIR/lib:$LIBRARY_PATH:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"
export LD_LIBRARY_PATH="$INSTALL_DIR/lib"$LD_LIBRARY_PATH;
export PATH=$INSTALL_DIR/bin:$PATH
export PKG_CONFIG_ALLOW_SYSTEM_LIBS="yes"
export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS="yes"

#error catching
set -e

function setup_environment()
{
    sudo apt update &> /dev/null
    sudo apt install -y pcre2-utils git make autoconf build-essential re2c libexpat1-dev asciidoc libz-dev gettext libtool libtool-bin zlib1g-dev libcurl4-openssl-dev libzip-dev libssl-dev &> /dev/null
    
    mkdir -p aarch64-linux-musl && cd aarch64-linux-musl
    wget -q -O "aarch64-linux-musl.tar.xz" "https://github.com/STICKnoLOGIC/musl-cross-make/releases/latest/download/aarch64-linux-musl.tar.xz"
    tar Jxfv aarch64-linux-musl.tar.xz > /dev/null
    echo "$(pwd)/bin" >> $GITHUB_PATH
    cd ..
    DIR="$(pwd)"
    echo "DIR=$DIR" >> "$GITHUB_ENV"
    rm -r -f "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
    rm -r -f bin/ >> "$DIR/install.log" 2>&1
    mkdir -m 0755 "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
    mkdir -m 0755 "$BUILD_DIR" >> "$DIR/install.log" 2>&1
    sudo mkdir -m 0755 -p $GIT_DIRS >> "$DIR/install.log" 2>&1
    mkdir -m 0755 -p $INSTALL_DIR >> "$DIR/install.log" 2>&1
    mkdir -m 0755 -p "$LIB_BUILD_DIR" >> "$DIR/install.log" 2>&1
}

function build_zlib(){
    echo "[INFO] Initializing zlib Build..."
    if [ ! "$1" = "" ]; then
        zlib_v=$1
    else
        zlib_v=$ZLIB_v
    fi 
    /usr/bin/curl -L "https://github.com/madler/zlib/releases/latest/download/zlib-$zlib_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo -n " checking..."
    cd "./zlib-$zlib_v"
    ./configure --prefix="$INSTALL_DIR" --static >> "$DIR/install.log" 2>&1
    echo -n " compiling..."
    make -j 2 >> "$DIR/install.log"
    make -j 2 install >> "$DIR/install.log"
    cd ..
    echo " done!"
    echo "[INFO] Building zlib:success..."
}

function build_openssl()
{
    echo "[INFO] Initializing OpenSSL Build..."
    if [ ! "$1" = "" ]; then
        openssl_v=$1
    else
        openssl_v=$OPENSSL_v
    fi 
    local OPENSSL_CMD='./Configure linux-aarch64 no-shared'
    local WITH_OPENSSL="--with-openssl=$INSTALL_DIR"
    openssl_dir="./openssl-$openssl_v"
    /usr/bin/curl -L "http://www.openssl.org/source/openssl-$openssl_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo -n " checking..."
    cd "$openssl_dir"
    $OPENSSL_CMD \
        --prefix="$INSTALL_DIR" \
        --openssldir="$INSTALL_DIR" \
        no-asm \
        no-hw \
        no-engine >> "$DIR/install.log" 2>&1
    echo -n " compiling..."
     make -j 2 >> "$DIR/install.log" 2>&1
    echo -n " installing..."
    make -j 2 install_sw >> "$DIR/install.log" 2>&1
    cd ..
    echo " done!"
    echo "[INFO] Building OpenSSL:success..."
}

function build_curl()
{
    echo "[INFO] Initializing Curl Build..."
    
    echo "[INFO] checking zlib..."
    if [ ! -e "$INSTALL_DIR/lib/libz.a" ]; then
        echo -n "[INFO] zlib not found..."
        build_zlib
    fi    

    echo "[INFO] checking openssl..."
    if [ ! -e "$INSTALL_DIR/bin/openssl" ]; then
        echo -n "[INFO] openssl not found..."
        build_openssl
    fi

    echo "[INFO] building Curl..."
    if [ ! "$1" = "" ]; then
        curl_v=$1
    else
        curl_v=$CURL_v
    fi

    EXTRA_FLAGS="--enable-static --disable-shared"
    curl_dir="./curl-$curl_v"
    /usr/bin/curl -L "https://curl.se/download/curl-$curl_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo -n " checking..."
    cd "$curl_dir"
    ./buildconf --force >> "$DIR/install.log" 2>&1
    ./configure --disable-dependency-tracking \
        --enable-ipv6 \
        --enable-optimize \
        --enable-http \
        --enable-ftp \
        --enable-dict \
        --enable-file \
        --without-librtmp \
        --enable-gopher \
        --enable-imap \
        --enable-pop3 \
        --enable-rtsp \
        --enable-smtp \
        --enable-telnet \
        --enable-tftp \
        --disable-ldap \
        --disable-ldaps \
        --without-libidn \
        --without-libidn2 \
        --without-brotli \
        --without-nghttp2 \
        --without-zstd \
        --with-zlib="$INSTALL_DIR" \
        --with-ssl="$INSTALL_DIR" \
        --enable-threaded-resolver \
        --prefix="$INSTALL_DIR" \
        $EXTRA_FLAGS \
        $CONFIGURE_FLAGS >> "$DIR/install.log" 2>&1
    echo -n " compiling..."
    make -j 2 >> "$DIR/install.log" 2>&1
    echo -n " installing..."
    make -j 2 install >> "$DIR/install.log" 2>&1
    cd ..
    echo " done!"
    echo "[INFO] Building Curl:success..."
}

function build_libexpat()
{
    if [ ! "$1" = "" ]; then
        libexpat_v=$1
    else
        libexpat_v=$LIBEXPAT_v
    fi

    /usr/bin/curl -L https://github.com/libexpat/libexpat/releases/latest/download/expat-$libexpat_v.tar.gz | tar -xz
    cd ./expat-$libexpat_v
    ./configure --prefix=$INSTALL_DIR \
        --enable-silent-rules \
        --disable-dependency-tracking \
        --enable-static=yes \
        --enable-shared=no \
        --enable-fast-install=yes \
        --without-ddocbook \
        $CONFIGURE_FLAGS 
    make -j 2
    make -j 2 install

}

function build_pcre2()
{
    echo "[INFO] Initializing Pcre2 Build..."
    if [ ! "$1" = "" ]; then
        pcre2_v=$1
    else
        pcre2_v=$PCRE_v
    fi 
    curl -L https://github.com/PCRE2Project/pcre2/releases/latest/download/pcre2-$pcre2_v.tar.gz | tar -zx
    cd ./pcre2-$pcre2_v
    ./configure $CONFIGURE_FLAGS --disable-shared --prefix=$INSTALL_DIR
    echo -n " compiling..."
    make -j 2 >> "$DIR/install.log" 2>&1
    echo -n " installing..."
    make -j 2 install
    cd ..
    echo " done!"
    echo "[INFO] Building Pcre2:success..."
    
}

function build_git()
{
    echo "[INFO] Initializing git Build..."
    if [ ! -e "$INSTALL_DIR/bin/curl" ]; then
     build_curl
    fi

    if [! -e "$INSTALL_DIR/bin/pcre2-config" ]; then
    build_pcre2
    fi

    build_libexpat

    if [ ! "$1" = "" ]; then
        git_v=$1
    else
        git_v=$GIT_v
    fi 
    export ac_cv_func_memcmp_working=yes
    export ac_cv_fread_reads_directories=yes
    export ac_cv_header_libintl_h=no
    export ac_cv_iconv_omits_bom=no
    export ac_cv_snprintf_returns_bogus=no
    export ac_cv_lib_curl_curl_global_init=yes

    /usr/bin/curl https://mirrors.kernel.org/pub/software/scm/git/git-$git_v.tar.gz | tar xz
    # mv -fv $DIR/patches/git/* ./git-2.41.0/
    cd git-$git_v
    RANLIB=$RANLIB ./configure CURLDIR=$INSTALL_DIR \
        OPENSSLDIR=$INSTALL_DIR \
        NO_GETTEXT=YesPlease \
        --prefix=$DIR/git-static \
        --with-openssl \
        --with-curl \
        --with-expat \
        NO_ICONV=YesPlease \
        USE_LIBPCRE=YesPlease \
        CFLAGS="-static -s -w" LDFLAGS="$LDFLAGS" \
        $CONFIGURE_FLAGS # LIBS="-lcurl -lssl -lcrypto"
    # make -j 1 strip
    echo -n " compiling..."
    make -j 2 >> "$DIR/install.log" 2>&1
    echo -n " installing..."
    make -j 2 install
    echo " done!"
    cd ..
    echo "[INFO] Building Pcre2:success..."

    echo "######################################"
    ls $INSTALL_DIR/lib
    echo "######################################"
    ls $INSTALL_DIR/bin
}

