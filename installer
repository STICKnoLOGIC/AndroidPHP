#!/bin/bash


#versions of libs
CURL_v='8.2.1'
GIT_v='2.41.0'
OPENSSL_v='1.1.1t'
ZLIB_v='1.3'
PCRE_v='10.42'
LIBEXPAT_v='2.5.0'
MARIADB_v='11.0.3'
NCURSES_v='6.4'


#DIRS
DIR="$(pwd)"
BASE_BUILD_DIR="$DIR/install_data"
BUILD_DIR="$BASE_BUILD_DIR/subdir"
LIB_BUILD_DIR="$BUILD_DIR/lib"
GIT_DIRS="$DIR/git-static/git"
INSTALL_DIR="$DIR/LS"

#cross compiler env
TOOLCHAIN_PREFIX="aarch64-linux-musl"
export CONFIGURE_FLAGS="--host=$TOOLCHAIN_PREFIX"
export CFLAGS="$CFLAGS -static -s -w"
export CXXFLAGS="-static $CXXFLAGS " 
export LDFLAGS="-static -static-libgcc -Wl,-static -L$INSTALL_DIR/lib -L/usr/lib"
export ac_cv_func_fnmatch_works=yes
export EXTRA_CFLAGS=-lresolv
export CC="$TOOLCHAIN_PREFIX-gcc"
export CXX="$TOOLCHAIN_PREFIX-g++"
export AR="$TOOLCHAIN_PREFIX-ar"
export RANLIB="$TOOLCHAIN_PREFIX-ranlib"
export CPP="$TOOLCHAIN_PREFIX-cpp"
export LD="$TOOLCHAIN_PREFIX-ld"
export CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include -I/usr/include"
export LIBRARY_PATH="$INSTALL_DIR:$INSTALL_DIR/lib:/usr/lib:$LIBRARY_PATH:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"
export LD_LIBRARY_PATH=$INSTALL_DIR/lib:/usr/lib:$DIR/aarch64-linux-musl/lib:$LD_LIBRARY_PATH;
export PATH=$INSTALL_DIR/bin:$DIR/aarch64-linux-musl/bin:/usr/bin:$PATH
export PKG_CONFIG_ALLOW_SYSTEM_LIBS="yes"
export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS="yes"

#error catching
set -ex

function setup_repo_ubuntu(){
    
    sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu focal universe"
    sudo add-apt-repository "deb-src http://archive.ubuntu.com/ubuntu focal universe"
    sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu focal-updates universe"
    sudo add-apt-repository "deb-src http://archive.ubuntu.com/ubuntu focal-updates universe"

}

function setup_environment()
{

    sudo apt update &> /dev/null
    sudo apt-get install -y pcre2-utils git cmake make autoconf build-essential re2c libexpat1-dev asciidoc libz-dev gettext libtool libtool-bin zlib1g-dev libcurl4-openssl-dev libzip-dev libssl-dev &> /dev/null
    sudo apt-get build-dep mariadb-server
    
    mkdir -p aarch64-linux-musl && cd aarch64-linux-musl
    wget -q -O "aarch64-linux-musl.tar.xz" "https://github.com/STICKnoLOGIC/musl-cross-make/releases/latest/download/aarch64-linux-musl.tar.xz"
    tar Jxfv aarch64-linux-musl.tar.xz > /dev/null
    cd ..
    rm -r -f "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
    rm -r -f bin/ >> "$DIR/install.log" 2>&1
    mkdir -m 0755 "$BASE_BUILD_DIR" >> "$DIR/install.log" 2>&1
    mkdir -m 0755 "$BUILD_DIR" >> "$DIR/install.log" 2>&1
    mkdir -p $GIT_DIRS >> "$DIR/install.log" 2>&1
    mkdir -m 0755 -p $INSTALL_DIR >> "$DIR/install.log" 2>&1
    mkdir -m 0755 -p "$LIB_BUILD_DIR" >> "$DIR/install.log" 2>&1
}

function build_zlib(){

    if [ ! "$1" = "" ]; then
        zlib_v=$1
    else
        zlib_v=$ZLIB_v
    fi 
    echo ZLIB
    /usr/bin/curl -L "https://github.com/madler/zlib/releases/download/v$zlib_v/zlib-$zlib_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo "checking..."
    cd "./zlib-$zlib_v"
    ./configure --prefix="$INSTALL_DIR" --static >> "$DIR/install.log" 2>&1
    echo "compiling..."
    make -j 8 >> "$DIR/install.log"
    make -j 8 install >> "$DIR/install.log"
    cd ..
    echo " success..."
}

function build_openssl()
{
    if [ ! "$1" = "" ]; then
        openssl_v=$1
    else
        openssl_v=$OPENSSL_v
    fi
    echo OPENSSL
    local OPENSSL_CMD='./Configure linux-aarch64 no-shared'
    local WITH_OPENSSL="--with-openssl=$INSTALL_DIR"
    openssl_dir="./openssl-$openssl_v"
    /usr/bin/curl -L "http://www.openssl.org/source/openssl-$openssl_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo "checking..."
    cd "$openssl_dir"
    $OPENSSL_CMD \
        --prefix="$INSTALL_DIR" \
        --openssldir="$INSTALL_DIR" \
        no-asm \
        no-hw \
        no-engine >> "$DIR/install.log" 2>&1
    echo " compiling..."
     make -j 8 >> "$DIR/install.log" 2>&1
    echo " installing..."
    make -j 8 install_sw >> "$DIR/install.log" 2>&1
    cd ..
    echo "success..."
}

function build_curl()
{
    if [ ! -e "$INSTALL_DIR/lib/libz.a" ]; then
        build_zlib
    fi    
    if [ ! -e "$INSTALL_DIR/bin/openssl" ]; then
        build_openssl
    fi

    if [ ! "$1" = "" ]; then
        curl_v=$1
    else
        curl_v=$CURL_v
    fi

    echo CURL
    EXTRA_FLAGS="--enable-static --disable-shared"
    curl_dir="./curl-$curl_v"
    /usr/bin/curl -L "https://curl.se/download/curl-$curl_v.tar.gz" | tar -zvx >> "$DIR/install.log" 2>&1
    echo " checking..."
    cd "$curl_dir"
    ./buildconf --force >> "$DIR/install.log" 2>&1
    ./configure --disable-dependency-tracking \
        --enable-ipv6 \
        --enable-optimize \
        --enable-http \
        --enable-ftp \
        --enable-dict \
        --enable-file \
        --without-librtmp \
        --enable-gopher \
        --enable-imap \
        --enable-pop3 \
        --enable-rtsp \
        --enable-smtp \
        --enable-telnet \
        --enable-tftp \
        --disable-ldap \
        --disable-ldaps \
        --without-libidn \
        --without-libidn2 \
        --without-brotli \
        --without-nghttp2 \
        --without-zstd \
        --with-zlib="$INSTALL_DIR" \
        --with-ssl="$INSTALL_DIR" \
        --enable-threaded-resolver \
        --prefix="$INSTALL_DIR" \
        $EXTRA_FLAGS \
        $CONFIGURE_FLAGS >> "$DIR/install.log" 2>&1
    echo " compiling..."
    make -j 8 >> "$DIR/install.log" 2>&1
    echo " installing..."
    make -j 8 install >> "$DIR/install.log" 2>&1
    cd ..
    echo "success..."

}

function build_libexpat()
{
    if [ ! "$1" = "" ]; then
        libexpat_v=$1
    else
        libexpat_v=$LIBEXPAT_v
    fi
    echo LIBEXPAT
    /usr/bin/curl -L https://github.com/libexpat/libexpat/releases/latest/download/expat-$libexpat_v.tar.gz | tar -xz
    cd ./expat-$libexpat_v
    echo checking...
    ./configure --prefix=$INSTALL_DIR \
        --enable-silent-rules \
        --disable-dependency-tracking \
        --enable-static=yes \
        --enable-shared=no \
        --enable-fast-install=yes \
        --without-docbook \
        $CONFIGURE_FLAGS >> "$DIR/install.log" 2>&1
    echo compiling...
    make -j 8 >> "$DIR/install.log" 2>&1 
    echo installing...
    make -j 8 install >> "$DIR/install.log" 2>&1
    echo success...
    cd ..

}

function build_pcre2()
{

    if [ ! "$1" = "" ]; then
        pcre2_v=$1
    else
        pcre2_v=$PCRE_v
    fi 
    echo PCRE2
    /usr/bin/curl -L https://github.com/PCRE2Project/pcre2/releases/latest/download/pcre2-$pcre2_v.tar.gz | tar -zxv
    cd ./pcre2-$pcre2_v
    ./configure $CONFIGURE_FLAGS --disable-shared --prefix=$INSTALL_DIR >> "$DIR/install.log" 2>&1
    echo "compiling..."
    make -j 8 >> "$DIR/install.log" 2>&1
    echo "installing..."
    make -j 8 install >> "$DIR/install.log" 2>&1
    cd ..
    echo " success..."
    
}

function build_curses(){
    
    if [ ! "$1" = "" ]; then
        ncurses_v=$1
    else
        ncurses_v=$NCURSES_v
    fi
    echo NCURSES 
    wget http://ftp.gnu.org/pub/gnu/ncurses/ncurses-$ncurses_v.tar.gz
    tar xzf ncurses-$ncurses_v.tar.gz
    cd ncurses-$ncurses_v
    echo checking...
    ./configure --prefix=$INSTALL_DIR \
        --disable-nls \
        CFLAGS="$CFLAGS" \
        LDFLAGS="$LDFLAGS" \
        ac_cv_header_local_h=no \
        am_cv_langinfo_codeset=no \
        --disable-stripping \
        --enable-widec \
        --without-manpages \
        --without-ada \
        --without-debug \
        --without-tests \
        $CONFIGURE_FLAGS >> "$DIR/install.log" 2>&1
    echo compiling...
    make -j 8 >> "$DIR/install.log" 2>&1
    echo instaliing...
    make -j 8 install >> "$DIR/install.log" 2>&1
    cd ..
    echo success...
    ls -al $INSTALL_DIR/lib
   
}

function build_git()
{
    export ac_cv_func_memcmp_working=yes
    export ac_cv_fread_reads_directories=yes
    export ac_cv_header_libintl_h=no
    export ac_cv_iconv_omits_bom=no
    export ac_cv_snprintf_returns_bogus=no
    export ac_cv_lib_curl_curl_global_init=yes

    build_curl
    build_pcre2
    build_libexpat
    build_pcre2
    
    if [ ! "$1" = "" ]; then
        git_v=$1
    else
        git_v=$GIT_v
    fi

    echo GIT
    /usr/bin/curl https://mirrors.kernel.org/pub/software/scm/git/git-$git_v.tar.gz | tar xz
    cd git-$git_v
    echo checking...
    ./configure CURLDIR=$INSTALL_DIR \
        OPENSSLDIR=$INSTALL_DIR \
        NO_GETTEXT=YesPlease \
        NO_NSEC=YesPlease \
        NO_ICONV=YesPlease \
        USE_LIBPCRE=YesPlease \
        --prefix=$GIT_DIRS \
        --with-openssl \
        --with-curl \
        --with-expat \
        $CONFIGURE_FLAGS >> "$DIR/install.log" 2>&1 # LIBS="-lcurl -lssl -lcrypto"
    echo " compiling..."
    make -j 8 -s >> "$DIR/install.log" 2>&1
    echo " installing..."
    make -j 8 install >> "$DIR/install.log" 2>&1
    echo " success..."
    cd ..
}

function build_mdb()
{

    # build_curl
    # build_libexpat
    # build_pcre2
    # build_curses

    local mdb_dir=$DIR/mdb-static/mariadb
    mkdir -p $mdb_dir

    if [ ! "$1" = "" ]; then
        mariadb_v=$1
    else
        mariadb_v=$MARIADB_v
    fi
    echo MARIAdb
    cd $BUILD_DIR
    /usr/bin/curl -L https://archive.mariadb.org/mariadb-$mariadb_v/source/mariadb-$mariadb_v.tar.gz | tar -zx
    cd mariadb-$mariadb_v
    
    sed -i 's/^\s*END[(][)]/ENDIF()/g' ./libmariadb/cmake/ConnectorName.cmake >> "$DIR/install.log" 2>&1
    sed -i '/ADD_SUBDIRECTORY(libmysqld\/examples)/d' ./CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/mariadb-test/d' ./CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/MYSQL_ADD_EXECUTABLE(mariadb-test mysqltest.cc \${CMAKE_SOURCE_DIR/d' ./client/CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/SET_SOURCE_FILES_PROPERTIES(mysqltest.cc PROPERTIES COMPILE_FLAGS/d' ./client/CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/TARGET_LINK_LIBRARIES(mariadb-test/d' ./client/CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/SET_TARGET_PROPERTIES(mariadb-test/d' ./client/CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i 's/FOREACH(t mariadb mariadb-test/FOREACH(t mariadb/g' ./client/CMakeLists.txt >> "$DIR/install.log" 2>&1
    sed -i '/\/etc\/mysql\/mariadb.conf.d/d' ./cmake/install_layout.cmake >> "$DIR/install.log" 2>&1
    echo cmake HOST
    mkdir -p HOST
    cd HOST
    cmake .. \
          -DCURSES_LIBRARY=$INSTALL_DIR/lib/libncursesw.a -DCURSES_INCLUDE_PATH=$INSTALL_DIR/include \
          -DZLIB_LIBRARY=$INSTALL_DIR/lib/libz.a -DZLIB_INCLUDE_PATH=$INSTALL_DIR/include 
    make -j 8 import_executables
    cd ..

    echo compiling...
    export CPPFLAGS="$CPPFLAGS -Dushort=u_short"
    cmake . -DWITHOUT_TOKUDB=1 \
          -DBUILD_CONFIG=mysql_release \
          -DZLIB_LIBRARY=$INSTALL_DIR/lib/libz.a -DZLIB_INCLUDE_PATH=$INSTALL_DIR/include \
          -DCURSES_LIBRARY=$INSTALL_DIR/lib/libncursesw.a -DCURSES_INCLUDE_PATH=$INSTALL_DIR/include \
          -DGSSAPI_FOUND=NO \
          -DGRN_WITH_LZ4=yes \
          -DENABLED_LOCAL_INFILE=ON \
          -DHAVE_UCONTEXT_H=False \
          -DIMPORT_EXECUTABLES=$mdb_dir/HOST/import_executables.cmake \
          -DINSTALL_UNIX_ADDRDIR=$mdb_dir/var/mysqld.sock \
          -DINSTALL_SBINDIR=$mdb_dir/bin \
          -DMYSQL_DATADIR=$mdb/lib/mysql \
          -DPLUGIN_AUTH_GSSAPI_CLIENT=OFF \
          -DPLUGIN_AUTH_GSSAPI=NO \
          -DPLUGIN_AUTH_PAM=NO \
          -DPLUGIN_CONNECT=NO \
          -DPLUGIN_DAEMON_EXAMPLE=NO \
          -DPLUGIN_EXAMPLE=NO \
          -DPLUGIN_GSSAPI=OFF \
          -DPLUGIN_ROCKSDB=NO \
          -DPLUGIN_TOKUDB=NO \
          -DPLUGIN_SERVER_AUDIT=NO \
          -DSTACK_DIRECTION=-1 \
          -DTMPDIR=$mdb_dir/tmp \
          -DWITH_EXTRA_CHARSETS=complex \
          -DWITH_JEMALLOC=OFF \
          -DWITH_MARIABACKUP=OFF \
          -DWITH_PCRE=system \
          -DWITH_LZ4=system \
          -DWITH_SSL=system \
          -DWITH_ZLIB=system \
          -DWITH_READLINE=OFF \
          -DWITH_WSREP=False \
          -DWITH_INNODB_BZIP2=OFF \
          -DWITH_INNODB_LZ4=ON \
          -DWITH_INNODB_LZMA=ON \
          -DWITH_INNODB_LZO=ON \
          -DWITH_INNODB_SNAPPY=OFF \
          -DWITH_UNIT_TESTS=OFF \
          -DINSTALL_SYSCONFDIR=$mdb_dir/etc

    mkdir -p $mdb_dir/etc/my.cnf.d

    echo installing...
    make -j 8 install
    
    echo success...

}

